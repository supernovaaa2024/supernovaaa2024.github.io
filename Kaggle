{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ce59efe1",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:10.588414Z",
     "iopub.status.busy": "2025-06-14T01:49:10.588075Z",
     "iopub.status.idle": "2025-06-14T01:49:12.632361Z",
     "shell.execute_reply": "2025-06-14T01:49:12.631294Z"
    },
    "papermill": {
     "duration": 2.052534,
     "end_time": "2025-06-14T01:49:12.633925",
     "exception": false,
     "start_time": "2025-06-14T01:49:10.581391",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/spaceship-titanic/sample_submission.csv\n",
      "/kaggle/input/spaceship-titanic/train.csv\n",
      "/kaggle/input/spaceship-titanic/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "928ed8e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:12.645510Z",
     "iopub.status.busy": "2025-06-14T01:49:12.644804Z",
     "iopub.status.idle": "2025-06-14T01:49:12.723509Z",
     "shell.execute_reply": "2025-06-14T01:49:12.722622Z"
    },
    "papermill": {
     "duration": 0.086357,
     "end_time": "2025-06-14T01:49:12.725047",
     "exception": false,
     "start_time": "2025-06-14T01:49:12.638690",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/spaceship-titanic/train.csv\")\n",
    "df_test = pd.read_csv(\"/kaggle/input/spaceship-titanic/test.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b8c3fde1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:12.735207Z",
     "iopub.status.busy": "2025-06-14T01:49:12.734858Z",
     "iopub.status.idle": "2025-06-14T01:49:12.740425Z",
     "shell.execute_reply": "2025-06-14T01:49:12.739223Z"
    },
    "papermill": {
     "duration": 0.012369,
     "end_time": "2025-06-14T01:49:12.741930",
     "exception": false,
     "start_time": "2025-06-14T01:49:12.729561",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processor: x86_64\n",
      "Machine type: x86_64\n",
      "System: Linux\n",
      "CPU count: 4\n"
     ]
    }
   ],
   "source": [
    "import platform\n",
    "import os\n",
    "\n",
    "print(\"Processor:\", platform.processor())\n",
    "print(\"Machine type:\", platform.machine())\n",
    "print(\"System:\", platform.system())\n",
    "print(\"CPU count:\", os.cpu_count())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "160a9713",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:12.752537Z",
     "iopub.status.busy": "2025-06-14T01:49:12.752170Z",
     "iopub.status.idle": "2025-06-14T01:49:12.795098Z",
     "shell.execute_reply": "2025-06-14T01:49:12.794208Z"
    },
    "papermill": {
     "duration": 0.050104,
     "end_time": "2025-06-14T01:49:12.796611",
     "exception": false,
     "start_time": "2025-06-14T01:49:12.746507",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>HomePlanet</th>\n",
       "      <th>CryoSleep</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Age</th>\n",
       "      <th>VIP</th>\n",
       "      <th>RoomService</th>\n",
       "      <th>FoodCourt</th>\n",
       "      <th>ShoppingMall</th>\n",
       "      <th>Spa</th>\n",
       "      <th>VRDeck</th>\n",
       "      <th>Name</th>\n",
       "      <th>Transported</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0001_01</td>\n",
       "      <td>Europa</td>\n",
       "      <td>False</td>\n",
       "      <td>B/0/P</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>39.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Maham Ofracculy</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0002_01</td>\n",
       "      <td>Earth</td>\n",
       "      <td>False</td>\n",
       "      <td>F/0/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>24.0</td>\n",
       "      <td>False</td>\n",
       "      <td>109.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>549.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>Juanna Vines</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0003_01</td>\n",
       "      <td>Europa</td>\n",
       "      <td>False</td>\n",
       "      <td>A/0/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>58.0</td>\n",
       "      <td>True</td>\n",
       "      <td>43.0</td>\n",
       "      <td>3576.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6715.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>Altark Susent</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0003_02</td>\n",
       "      <td>Europa</td>\n",
       "      <td>False</td>\n",
       "      <td>A/0/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>33.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1283.0</td>\n",
       "      <td>371.0</td>\n",
       "      <td>3329.0</td>\n",
       "      <td>193.0</td>\n",
       "      <td>Solam Susent</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0004_01</td>\n",
       "      <td>Earth</td>\n",
       "      <td>False</td>\n",
       "      <td>F/1/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>16.0</td>\n",
       "      <td>False</td>\n",
       "      <td>303.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>151.0</td>\n",
       "      <td>565.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Willy Santantines</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8688</th>\n",
       "      <td>9276_01</td>\n",
       "      <td>Europa</td>\n",
       "      <td>False</td>\n",
       "      <td>A/98/P</td>\n",
       "      <td>55 Cancri e</td>\n",
       "      <td>41.0</td>\n",
       "      <td>True</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6819.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1643.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>Gravior Noxnuther</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8689</th>\n",
       "      <td>9278_01</td>\n",
       "      <td>Earth</td>\n",
       "      <td>True</td>\n",
       "      <td>G/1499/S</td>\n",
       "      <td>PSO J318.5-22</td>\n",
       "      <td>18.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Kurta Mondalley</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8690</th>\n",
       "      <td>9279_01</td>\n",
       "      <td>Earth</td>\n",
       "      <td>False</td>\n",
       "      <td>G/1500/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>26.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1872.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Fayey Connon</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8691</th>\n",
       "      <td>9280_01</td>\n",
       "      <td>Europa</td>\n",
       "      <td>False</td>\n",
       "      <td>E/608/S</td>\n",
       "      <td>55 Cancri e</td>\n",
       "      <td>32.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1049.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>353.0</td>\n",
       "      <td>3235.0</td>\n",
       "      <td>Celeon Hontichre</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8692</th>\n",
       "      <td>9280_02</td>\n",
       "      <td>Europa</td>\n",
       "      <td>False</td>\n",
       "      <td>E/608/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>44.0</td>\n",
       "      <td>False</td>\n",
       "      <td>126.0</td>\n",
       "      <td>4688.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>Propsh Hontichre</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8693 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId HomePlanet CryoSleep     Cabin    Destination   Age    VIP  \\\n",
       "0        0001_01     Europa     False     B/0/P    TRAPPIST-1e  39.0  False   \n",
       "1        0002_01      Earth     False     F/0/S    TRAPPIST-1e  24.0  False   \n",
       "2        0003_01     Europa     False     A/0/S    TRAPPIST-1e  58.0   True   \n",
       "3        0003_02     Europa     False     A/0/S    TRAPPIST-1e  33.0  False   \n",
       "4        0004_01      Earth     False     F/1/S    TRAPPIST-1e  16.0  False   \n",
       "...          ...        ...       ...       ...            ...   ...    ...   \n",
       "8688     9276_01     Europa     False    A/98/P    55 Cancri e  41.0   True   \n",
       "8689     9278_01      Earth      True  G/1499/S  PSO J318.5-22  18.0  False   \n",
       "8690     9279_01      Earth     False  G/1500/S    TRAPPIST-1e  26.0  False   \n",
       "8691     9280_01     Europa     False   E/608/S    55 Cancri e  32.0  False   \n",
       "8692     9280_02     Europa     False   E/608/S    TRAPPIST-1e  44.0  False   \n",
       "\n",
       "      RoomService  FoodCourt  ShoppingMall     Spa  VRDeck               Name  \\\n",
       "0             0.0        0.0           0.0     0.0     0.0    Maham Ofracculy   \n",
       "1           109.0        9.0          25.0   549.0    44.0       Juanna Vines   \n",
       "2            43.0     3576.0           0.0  6715.0    49.0      Altark Susent   \n",
       "3             0.0     1283.0         371.0  3329.0   193.0       Solam Susent   \n",
       "4           303.0       70.0         151.0   565.0     2.0  Willy Santantines   \n",
       "...           ...        ...           ...     ...     ...                ...   \n",
       "8688          0.0     6819.0           0.0  1643.0    74.0  Gravior Noxnuther   \n",
       "8689          0.0        0.0           0.0     0.0     0.0    Kurta Mondalley   \n",
       "8690          0.0        0.0        1872.0     1.0     0.0       Fayey Connon   \n",
       "8691          0.0     1049.0           0.0   353.0  3235.0   Celeon Hontichre   \n",
       "8692        126.0     4688.0           0.0     0.0    12.0   Propsh Hontichre   \n",
       "\n",
       "      Transported  \n",
       "0           False  \n",
       "1            True  \n",
       "2           False  \n",
       "3           False  \n",
       "4            True  \n",
       "...           ...  \n",
       "8688        False  \n",
       "8689        False  \n",
       "8690         True  \n",
       "8691        False  \n",
       "8692         True  \n",
       "\n",
       "[8693 rows x 14 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "332874d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:12.807286Z",
     "iopub.status.busy": "2025-06-14T01:49:12.806952Z",
     "iopub.status.idle": "2025-06-14T01:49:12.828117Z",
     "shell.execute_reply": "2025-06-14T01:49:12.827129Z"
    },
    "papermill": {
     "duration": 0.028373,
     "end_time": "2025-06-14T01:49:12.829720",
     "exception": false,
     "start_time": "2025-06-14T01:49:12.801347",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>HomePlanet</th>\n",
       "      <th>CryoSleep</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Age</th>\n",
       "      <th>VIP</th>\n",
       "      <th>RoomService</th>\n",
       "      <th>FoodCourt</th>\n",
       "      <th>ShoppingMall</th>\n",
       "      <th>Spa</th>\n",
       "      <th>VRDeck</th>\n",
       "      <th>Name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0013_01</td>\n",
       "      <td>Earth</td>\n",
       "      <td>True</td>\n",
       "      <td>G/3/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>27.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Nelly Carsoning</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0018_01</td>\n",
       "      <td>Earth</td>\n",
       "      <td>False</td>\n",
       "      <td>F/4/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>19.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2823.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Lerome Peckers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0019_01</td>\n",
       "      <td>Europa</td>\n",
       "      <td>True</td>\n",
       "      <td>C/0/S</td>\n",
       "      <td>55 Cancri e</td>\n",
       "      <td>31.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Sabih Unhearfus</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0021_01</td>\n",
       "      <td>Europa</td>\n",
       "      <td>False</td>\n",
       "      <td>C/1/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>38.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6652.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>181.0</td>\n",
       "      <td>585.0</td>\n",
       "      <td>Meratz Caltilter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0023_01</td>\n",
       "      <td>Earth</td>\n",
       "      <td>False</td>\n",
       "      <td>F/5/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>20.0</td>\n",
       "      <td>False</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>635.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Brence Harperez</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4272</th>\n",
       "      <td>9266_02</td>\n",
       "      <td>Earth</td>\n",
       "      <td>True</td>\n",
       "      <td>G/1496/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>34.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Jeron Peter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4273</th>\n",
       "      <td>9269_01</td>\n",
       "      <td>Earth</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>42.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>847.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>144.0</td>\n",
       "      <td>Matty Scheron</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4274</th>\n",
       "      <td>9271_01</td>\n",
       "      <td>Mars</td>\n",
       "      <td>True</td>\n",
       "      <td>D/296/P</td>\n",
       "      <td>55 Cancri e</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Jayrin Pore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4275</th>\n",
       "      <td>9273_01</td>\n",
       "      <td>Europa</td>\n",
       "      <td>False</td>\n",
       "      <td>D/297/P</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2680.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>523.0</td>\n",
       "      <td>Kitakan Conale</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4276</th>\n",
       "      <td>9277_01</td>\n",
       "      <td>Earth</td>\n",
       "      <td>True</td>\n",
       "      <td>G/1498/S</td>\n",
       "      <td>PSO J318.5-22</td>\n",
       "      <td>43.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Lilace Leonzaley</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4277 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId HomePlanet CryoSleep     Cabin    Destination   Age    VIP  \\\n",
       "0        0013_01      Earth      True     G/3/S    TRAPPIST-1e  27.0  False   \n",
       "1        0018_01      Earth     False     F/4/S    TRAPPIST-1e  19.0  False   \n",
       "2        0019_01     Europa      True     C/0/S    55 Cancri e  31.0  False   \n",
       "3        0021_01     Europa     False     C/1/S    TRAPPIST-1e  38.0  False   \n",
       "4        0023_01      Earth     False     F/5/S    TRAPPIST-1e  20.0  False   \n",
       "...          ...        ...       ...       ...            ...   ...    ...   \n",
       "4272     9266_02      Earth      True  G/1496/S    TRAPPIST-1e  34.0  False   \n",
       "4273     9269_01      Earth     False       NaN    TRAPPIST-1e  42.0  False   \n",
       "4274     9271_01       Mars      True   D/296/P    55 Cancri e   NaN  False   \n",
       "4275     9273_01     Europa     False   D/297/P            NaN   NaN  False   \n",
       "4276     9277_01      Earth      True  G/1498/S  PSO J318.5-22  43.0  False   \n",
       "\n",
       "      RoomService  FoodCourt  ShoppingMall     Spa  VRDeck              Name  \n",
       "0             0.0        0.0           0.0     0.0     0.0   Nelly Carsoning  \n",
       "1             0.0        9.0           0.0  2823.0     0.0    Lerome Peckers  \n",
       "2             0.0        0.0           0.0     0.0     0.0   Sabih Unhearfus  \n",
       "3             0.0     6652.0           0.0   181.0   585.0  Meratz Caltilter  \n",
       "4            10.0        0.0         635.0     0.0     0.0   Brence Harperez  \n",
       "...           ...        ...           ...     ...     ...               ...  \n",
       "4272          0.0        0.0           0.0     0.0     0.0       Jeron Peter  \n",
       "4273          0.0      847.0          17.0    10.0   144.0     Matty Scheron  \n",
       "4274          0.0        0.0           0.0     0.0     0.0       Jayrin Pore  \n",
       "4275          0.0     2680.0           0.0     0.0   523.0    Kitakan Conale  \n",
       "4276          0.0        0.0           0.0     0.0     0.0  Lilace Leonzaley  \n",
       "\n",
       "[4277 rows x 13 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "115fba5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:12.842244Z",
     "iopub.status.busy": "2025-06-14T01:49:12.841819Z",
     "iopub.status.idle": "2025-06-14T01:49:12.866358Z",
     "shell.execute_reply": "2025-06-14T01:49:12.865376Z"
    },
    "papermill": {
     "duration": 0.032947,
     "end_time": "2025-06-14T01:49:12.867845",
     "exception": false,
     "start_time": "2025-06-14T01:49:12.834898",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "# check duplication\n",
    "print(len(df.drop_duplicates()) == len(df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "75707d87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:12.879497Z",
     "iopub.status.busy": "2025-06-14T01:49:12.879189Z",
     "iopub.status.idle": "2025-06-14T01:49:12.889663Z",
     "shell.execute_reply": "2025-06-14T01:49:12.888887Z"
    },
    "papermill": {
     "duration": 0.017885,
     "end_time": "2025-06-14T01:49:12.891070",
     "exception": false,
     "start_time": "2025-06-14T01:49:12.873185",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId       0\n",
       "HomePlanet      201\n",
       "CryoSleep       217\n",
       "Cabin           199\n",
       "Destination     182\n",
       "Age             179\n",
       "VIP             203\n",
       "RoomService     181\n",
       "FoodCourt       183\n",
       "ShoppingMall    208\n",
       "Spa             183\n",
       "VRDeck          188\n",
       "Name            200\n",
       "Transported       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check null values\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "534b2e37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:12.903153Z",
     "iopub.status.busy": "2025-06-14T01:49:12.902390Z",
     "iopub.status.idle": "2025-06-14T01:49:12.911269Z",
     "shell.execute_reply": "2025-06-14T01:49:12.910367Z"
    },
    "papermill": {
     "duration": 0.016227,
     "end_time": "2025-06-14T01:49:12.912716",
     "exception": false,
     "start_time": "2025-06-14T01:49:12.896489",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId       0\n",
       "HomePlanet       87\n",
       "CryoSleep        93\n",
       "Cabin           100\n",
       "Destination      92\n",
       "Age              91\n",
       "VIP              93\n",
       "RoomService      82\n",
       "FoodCourt       106\n",
       "ShoppingMall     98\n",
       "Spa             101\n",
       "VRDeck           80\n",
       "Name             94\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check null values\n",
    "df_test.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bef102ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:12.924779Z",
     "iopub.status.busy": "2025-06-14T01:49:12.924483Z",
     "iopub.status.idle": "2025-06-14T01:49:12.937306Z",
     "shell.execute_reply": "2025-06-14T01:49:12.936570Z"
    },
    "papermill": {
     "duration": 0.020584,
     "end_time": "2025-06-14T01:49:12.938832",
     "exception": false,
     "start_time": "2025-06-14T01:49:12.918248",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# option 1: drop every null values\n",
    "df = df.dropna().reset_index(drop=True)\n",
    "\n",
    "df_test = df_test.dropna().reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "85673f0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:12.950917Z",
     "iopub.status.busy": "2025-06-14T01:49:12.950608Z",
     "iopub.status.idle": "2025-06-14T01:49:12.958070Z",
     "shell.execute_reply": "2025-06-14T01:49:12.957194Z"
    },
    "papermill": {
     "duration": 0.015563,
     "end_time": "2025-06-14T01:49:12.959643",
     "exception": false,
     "start_time": "2025-06-14T01:49:12.944080",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Transported\n",
       "True     3327\n",
       "False    3279\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"Transported\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "257ed50a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:12.973614Z",
     "iopub.status.busy": "2025-06-14T01:49:12.972852Z",
     "iopub.status.idle": "2025-06-14T01:49:12.982729Z",
     "shell.execute_reply": "2025-06-14T01:49:12.981693Z"
    },
    "papermill": {
     "duration": 0.018297,
     "end_time": "2025-06-14T01:49:12.984209",
     "exception": false,
     "start_time": "2025-06-14T01:49:12.965912",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_features = df.drop(columns=[\"PassengerId\", \"Name\", \"Transported\"])\n",
    "df_test_features = df_test.drop(columns=[\"PassengerId\", \"Name\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "4797e8d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:12.997256Z",
     "iopub.status.busy": "2025-06-14T01:49:12.996903Z",
     "iopub.status.idle": "2025-06-14T01:49:13.003563Z",
     "shell.execute_reply": "2025-06-14T01:49:13.002529Z"
    },
    "papermill": {
     "duration": 0.015487,
     "end_time": "2025-06-14T01:49:13.005137",
     "exception": false,
     "start_time": "2025-06-14T01:49:12.989650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_numeric_features = df_features.select_dtypes(include=\"number\")\n",
    "df_test_numeric_features = df_test_features.select_dtypes(include=\"number\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b3e15057",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:13.018198Z",
     "iopub.status.busy": "2025-06-14T01:49:13.017899Z",
     "iopub.status.idle": "2025-06-14T01:49:13.356586Z",
     "shell.execute_reply": "2025-06-14T01:49:13.355507Z"
    },
    "papermill": {
     "duration": 0.347166,
     "end_time": "2025-06-14T01:49:13.358336",
     "exception": false,
     "start_time": "2025-06-14T01:49:13.011170",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "df_numeric_features[[\"RoomService\"]].boxplot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "630f62b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:13.371900Z",
     "iopub.status.busy": "2025-06-14T01:49:13.371593Z",
     "iopub.status.idle": "2025-06-14T01:49:14.898067Z",
     "shell.execute_reply": "2025-06-14T01:49:14.897155Z"
    },
    "papermill": {
     "duration": 1.535581,
     "end_time": "2025-06-14T01:49:14.899946",
     "exception": false,
     "start_time": "2025-06-14T01:49:13.364365",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler = StandardScaler()\n",
    "X_numeric_scaled = pd.DataFrame(scaler.fit_transform(df_numeric_features), columns=df_numeric_features.columns)\n",
    "X_test_numeric_scaled = pd.DataFrame(scaler.fit_transform(df_test_numeric_features), columns=df_test_numeric_features.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2f44c592",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:14.913512Z",
     "iopub.status.busy": "2025-06-14T01:49:14.913025Z",
     "iopub.status.idle": "2025-06-14T01:49:14.927547Z",
     "shell.execute_reply": "2025-06-14T01:49:14.926514Z"
    },
    "papermill": {
     "duration": 0.022891,
     "end_time": "2025-06-14T01:49:14.929114",
     "exception": false,
     "start_time": "2025-06-14T01:49:14.906223",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>RoomService</th>\n",
       "      <th>FoodCourt</th>\n",
       "      <th>ShoppingMall</th>\n",
       "      <th>Spa</th>\n",
       "      <th>VRDeck</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.695413</td>\n",
       "      <td>-0.345756</td>\n",
       "      <td>-0.285355</td>\n",
       "      <td>-0.309494</td>\n",
       "      <td>-0.273759</td>\n",
       "      <td>-0.269534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.336769</td>\n",
       "      <td>-0.176748</td>\n",
       "      <td>-0.279993</td>\n",
       "      <td>-0.266112</td>\n",
       "      <td>0.206165</td>\n",
       "      <td>-0.230494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.002842</td>\n",
       "      <td>-0.279083</td>\n",
       "      <td>1.845163</td>\n",
       "      <td>-0.309494</td>\n",
       "      <td>5.596357</td>\n",
       "      <td>-0.226058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.282540</td>\n",
       "      <td>-0.345756</td>\n",
       "      <td>0.479034</td>\n",
       "      <td>0.334285</td>\n",
       "      <td>2.636384</td>\n",
       "      <td>-0.098291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.887266</td>\n",
       "      <td>0.124056</td>\n",
       "      <td>-0.243650</td>\n",
       "      <td>-0.047470</td>\n",
       "      <td>0.220152</td>\n",
       "      <td>-0.267759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6601</th>\n",
       "      <td>0.833037</td>\n",
       "      <td>-0.345756</td>\n",
       "      <td>3.777285</td>\n",
       "      <td>-0.309494</td>\n",
       "      <td>1.162518</td>\n",
       "      <td>-0.203876</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6602</th>\n",
       "      <td>-0.749641</td>\n",
       "      <td>-0.345756</td>\n",
       "      <td>-0.285355</td>\n",
       "      <td>-0.309494</td>\n",
       "      <td>-0.273759</td>\n",
       "      <td>-0.269534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6603</th>\n",
       "      <td>-0.199145</td>\n",
       "      <td>-0.345756</td>\n",
       "      <td>-0.285355</td>\n",
       "      <td>2.938900</td>\n",
       "      <td>-0.272885</td>\n",
       "      <td>-0.269534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6604</th>\n",
       "      <td>0.213728</td>\n",
       "      <td>-0.345756</td>\n",
       "      <td>0.339621</td>\n",
       "      <td>-0.309494</td>\n",
       "      <td>0.034826</td>\n",
       "      <td>2.600774</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6605</th>\n",
       "      <td>1.039473</td>\n",
       "      <td>-0.150389</td>\n",
       "      <td>2.507673</td>\n",
       "      <td>-0.309494</td>\n",
       "      <td>-0.273759</td>\n",
       "      <td>-0.258887</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6606 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Age  RoomService  FoodCourt  ShoppingMall       Spa    VRDeck\n",
       "0     0.695413    -0.345756  -0.285355     -0.309494 -0.273759 -0.269534\n",
       "1    -0.336769    -0.176748  -0.279993     -0.266112  0.206165 -0.230494\n",
       "2     2.002842    -0.279083   1.845163     -0.309494  5.596357 -0.226058\n",
       "3     0.282540    -0.345756   0.479034      0.334285  2.636384 -0.098291\n",
       "4    -0.887266     0.124056  -0.243650     -0.047470  0.220152 -0.267759\n",
       "...        ...          ...        ...           ...       ...       ...\n",
       "6601  0.833037    -0.345756   3.777285     -0.309494  1.162518 -0.203876\n",
       "6602 -0.749641    -0.345756  -0.285355     -0.309494 -0.273759 -0.269534\n",
       "6603 -0.199145    -0.345756  -0.285355      2.938900 -0.272885 -0.269534\n",
       "6604  0.213728    -0.345756   0.339621     -0.309494  0.034826  2.600774\n",
       "6605  1.039473    -0.150389   2.507673     -0.309494 -0.273759 -0.258887\n",
       "\n",
       "[6606 rows x 6 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_numeric_scaled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c9042e8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:14.943022Z",
     "iopub.status.busy": "2025-06-14T01:49:14.942716Z",
     "iopub.status.idle": "2025-06-14T01:49:14.955061Z",
     "shell.execute_reply": "2025-06-14T01:49:14.954179Z"
    },
    "papermill": {
     "duration": 0.020984,
     "end_time": "2025-06-14T01:49:14.956533",
     "exception": false,
     "start_time": "2025-06-14T01:49:14.935549",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>RoomService</th>\n",
       "      <th>FoodCourt</th>\n",
       "      <th>ShoppingMall</th>\n",
       "      <th>Spa</th>\n",
       "      <th>VRDeck</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.112151</td>\n",
       "      <td>-0.355683</td>\n",
       "      <td>-0.295716</td>\n",
       "      <td>-0.308011</td>\n",
       "      <td>-0.273154</td>\n",
       "      <td>-0.256158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.679125</td>\n",
       "      <td>-0.355683</td>\n",
       "      <td>-0.289680</td>\n",
       "      <td>-0.308011</td>\n",
       "      <td>2.325647</td>\n",
       "      <td>-0.256158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.171336</td>\n",
       "      <td>-0.355683</td>\n",
       "      <td>-0.295716</td>\n",
       "      <td>-0.308011</td>\n",
       "      <td>-0.273154</td>\n",
       "      <td>-0.256158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.667439</td>\n",
       "      <td>-0.355683</td>\n",
       "      <td>4.165703</td>\n",
       "      <td>-0.308011</td>\n",
       "      <td>-0.106528</td>\n",
       "      <td>0.242759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.608253</td>\n",
       "      <td>-0.339527</td>\n",
       "      <td>-0.295716</td>\n",
       "      <td>0.807625</td>\n",
       "      <td>-0.273154</td>\n",
       "      <td>-0.256158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3276</th>\n",
       "      <td>1.021798</td>\n",
       "      <td>-0.355683</td>\n",
       "      <td>-0.295716</td>\n",
       "      <td>-0.308011</td>\n",
       "      <td>-0.273154</td>\n",
       "      <td>-0.256158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3277</th>\n",
       "      <td>1.021798</td>\n",
       "      <td>-0.279747</td>\n",
       "      <td>-0.295716</td>\n",
       "      <td>6.457841</td>\n",
       "      <td>-0.273154</td>\n",
       "      <td>-0.256158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3278</th>\n",
       "      <td>0.809183</td>\n",
       "      <td>-0.355683</td>\n",
       "      <td>0.284430</td>\n",
       "      <td>-0.308011</td>\n",
       "      <td>-0.270392</td>\n",
       "      <td>-0.256158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3279</th>\n",
       "      <td>0.383952</td>\n",
       "      <td>-0.355683</td>\n",
       "      <td>-0.295716</td>\n",
       "      <td>-0.308011</td>\n",
       "      <td>-0.273154</td>\n",
       "      <td>-0.256158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3280</th>\n",
       "      <td>1.021798</td>\n",
       "      <td>-0.355683</td>\n",
       "      <td>-0.295716</td>\n",
       "      <td>-0.308011</td>\n",
       "      <td>-0.273154</td>\n",
       "      <td>-0.256158</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3281 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Age  RoomService  FoodCourt  ShoppingMall       Spa    VRDeck\n",
       "0    -0.112151    -0.355683  -0.295716     -0.308011 -0.273154 -0.256158\n",
       "1    -0.679125    -0.355683  -0.289680     -0.308011  2.325647 -0.256158\n",
       "2     0.171336    -0.355683  -0.295716     -0.308011 -0.273154 -0.256158\n",
       "3     0.667439    -0.355683   4.165703     -0.308011 -0.106528  0.242759\n",
       "4    -0.608253    -0.339527  -0.295716      0.807625 -0.273154 -0.256158\n",
       "...        ...          ...        ...           ...       ...       ...\n",
       "3276  1.021798    -0.355683  -0.295716     -0.308011 -0.273154 -0.256158\n",
       "3277  1.021798    -0.279747  -0.295716      6.457841 -0.273154 -0.256158\n",
       "3278  0.809183    -0.355683   0.284430     -0.308011 -0.270392 -0.256158\n",
       "3279  0.383952    -0.355683  -0.295716     -0.308011 -0.273154 -0.256158\n",
       "3280  1.021798    -0.355683  -0.295716     -0.308011 -0.273154 -0.256158\n",
       "\n",
       "[3281 rows x 6 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test_numeric_scaled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "af3e4879",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:14.971416Z",
     "iopub.status.busy": "2025-06-14T01:49:14.971083Z",
     "iopub.status.idle": "2025-06-14T01:49:14.977397Z",
     "shell.execute_reply": "2025-06-14T01:49:14.976628Z"
    },
    "papermill": {
     "duration": 0.01563,
     "end_time": "2025-06-14T01:49:14.978828",
     "exception": false,
     "start_time": "2025-06-14T01:49:14.963198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_cetegorical_features = df_features.drop(columns=df_numeric_features.columns, inplace=False)\n",
    "df_test_categorical_features = df_test_features.drop(columns=df_test_numeric_features.columns, inplace=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ed4998c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:14.993541Z",
     "iopub.status.busy": "2025-06-14T01:49:14.993214Z",
     "iopub.status.idle": "2025-06-14T01:49:15.007618Z",
     "shell.execute_reply": "2025-06-14T01:49:15.006511Z"
    },
    "papermill": {
     "duration": 0.023334,
     "end_time": "2025-06-14T01:49:15.009377",
     "exception": false,
     "start_time": "2025-06-14T01:49:14.986043",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "HomePlanet      0\n",
      "CryoSleep       0\n",
      "Cabin           0\n",
      "Destination     0\n",
      "VIP             0\n",
      "Age             0\n",
      "RoomService     0\n",
      "FoodCourt       0\n",
      "ShoppingMall    0\n",
      "Spa             0\n",
      "VRDeck          0\n",
      "dtype: int64\n",
      "HomePlanet      0\n",
      "CryoSleep       0\n",
      "Cabin           0\n",
      "Destination     0\n",
      "VIP             0\n",
      "Age             0\n",
      "RoomService     0\n",
      "FoodCourt       0\n",
      "ShoppingMall    0\n",
      "Spa             0\n",
      "VRDeck          0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "df_scaled = pd.concat([df_cetegorical_features, X_numeric_scaled], axis=1)\n",
    "df_test_scaled = pd.concat([df_test_categorical_features, X_test_numeric_scaled], axis=1)\n",
    "print(df_scaled.isnull().sum())\n",
    "print(df_test_scaled.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2a1a87d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:15.024972Z",
     "iopub.status.busy": "2025-06-14T01:49:15.024656Z",
     "iopub.status.idle": "2025-06-14T01:49:15.146770Z",
     "shell.execute_reply": "2025-06-14T01:49:15.145370Z"
    },
    "papermill": {
     "duration": 0.131723,
     "end_time": "2025-06-14T01:49:15.148723",
     "exception": false,
     "start_time": "2025-06-14T01:49:15.017000",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "HomePlanet      0\n",
      "CryoSleep       0\n",
      "Destination     0\n",
      "VIP             0\n",
      "Age             0\n",
      "RoomService     0\n",
      "FoodCourt       0\n",
      "ShoppingMall    0\n",
      "Spa             0\n",
      "VRDeck          0\n",
      "deck            0\n",
      "num             0\n",
      "side            0\n",
      "dtype: int64\n",
      "HomePlanet      0\n",
      "CryoSleep       0\n",
      "Destination     0\n",
      "VIP             0\n",
      "Age             0\n",
      "RoomService     0\n",
      "FoodCourt       0\n",
      "ShoppingMall    0\n",
      "Spa             0\n",
      "VRDeck          0\n",
      "deck            0\n",
      "num             0\n",
      "side            0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "df_scaled[['deck', 'num', 'side']] = df_scaled['Cabin'].str.split('/', expand=True)\n",
    "df_scaled.drop(columns=[\"Cabin\"], inplace=True)\n",
    "\n",
    "df_test_scaled[['deck', 'num', 'side']] = df_test_scaled['Cabin'].str.split('/', expand=True)\n",
    "df_test_scaled.drop(columns=[\"Cabin\"], inplace=True)\n",
    "\n",
    "print(df_scaled.isnull().sum())\n",
    "print(df_test_scaled.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "7bc81930",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:15.163384Z",
     "iopub.status.busy": "2025-06-14T01:49:15.162607Z",
     "iopub.status.idle": "2025-06-14T01:49:15.202316Z",
     "shell.execute_reply": "2025-06-14T01:49:15.201504Z"
    },
    "papermill": {
     "duration": 0.048708,
     "end_time": "2025-06-14T01:49:15.203888",
     "exception": false,
     "start_time": "2025-06-14T01:49:15.155180",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "onehot_encoder = OneHotEncoder(drop=\"first\", sparse_output=False)\n",
    "df_scaled_categorical = df_scaled.select_dtypes(exclude=\"number\").drop(columns=[\"num\"])\n",
    "df_scaled_categorical_encoded = onehot_encoder.fit_transform(df_scaled_categorical)\n",
    "feature_names = onehot_encoder.get_feature_names_out()\n",
    "final_categorical = pd.DataFrame(df_scaled_categorical_encoded, columns=feature_names)\n",
    "\n",
    "onehot_encoder_test = OneHotEncoder(drop=\"first\", sparse_output=False)\n",
    "df_test_scaled_categorical = df_test_scaled.select_dtypes(exclude=\"number\").drop(columns=[\"num\"])\n",
    "df_test_scaled_categorical_encoded = onehot_encoder_test.fit_transform(df_test_scaled_categorical)\n",
    "feature_names = onehot_encoder_test.get_feature_names_out()\n",
    "final_test_categorical = pd.DataFrame(df_test_scaled_categorical_encoded, columns=feature_names)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "686d3829",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:15.218292Z",
     "iopub.status.busy": "2025-06-14T01:49:15.218005Z",
     "iopub.status.idle": "2025-06-14T01:49:15.232296Z",
     "shell.execute_reply": "2025-06-14T01:49:15.231158Z"
    },
    "papermill": {
     "duration": 0.023527,
     "end_time": "2025-06-14T01:49:15.233817",
     "exception": false,
     "start_time": "2025-06-14T01:49:15.210290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "HomePlanet_Europa            0\n",
      "HomePlanet_Mars              0\n",
      "CryoSleep_True               0\n",
      "Destination_PSO J318.5-22    0\n",
      "Destination_TRAPPIST-1e      0\n",
      "VIP_True                     0\n",
      "deck_B                       0\n",
      "deck_C                       0\n",
      "deck_D                       0\n",
      "deck_E                       0\n",
      "deck_F                       0\n",
      "deck_G                       0\n",
      "deck_T                       0\n",
      "side_S                       0\n",
      "Age                          0\n",
      "RoomService                  0\n",
      "FoodCourt                    0\n",
      "ShoppingMall                 0\n",
      "Spa                          0\n",
      "VRDeck                       0\n",
      "dtype: int64\n",
      "HomePlanet_Europa            0\n",
      "HomePlanet_Mars              0\n",
      "CryoSleep_True               0\n",
      "Destination_PSO J318.5-22    0\n",
      "Destination_TRAPPIST-1e      0\n",
      "VIP_True                     0\n",
      "deck_B                       0\n",
      "deck_C                       0\n",
      "deck_D                       0\n",
      "deck_E                       0\n",
      "deck_F                       0\n",
      "deck_G                       0\n",
      "deck_T                       0\n",
      "side_S                       0\n",
      "Age                          0\n",
      "RoomService                  0\n",
      "FoodCourt                    0\n",
      "ShoppingMall                 0\n",
      "Spa                          0\n",
      "VRDeck                       0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "df_scaled_numeric = df_scaled.select_dtypes(include=\"number\")\n",
    "final_df = pd.concat([final_categorical,df_scaled_numeric], axis=1)\n",
    "\n",
    "df_test_scaled_numeric = df_test_scaled.select_dtypes(include=\"number\")\n",
    "final_df_test = pd.concat([final_test_categorical, df_test_scaled_numeric], axis=1)\n",
    "\n",
    "print(final_df.isnull().sum())\n",
    "print(final_df_test.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "fd5e0a7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:15.247395Z",
     "iopub.status.busy": "2025-06-14T01:49:15.247089Z",
     "iopub.status.idle": "2025-06-14T01:49:18.265889Z",
     "shell.execute_reply": "2025-06-14T01:49:18.264537Z"
    },
    "papermill": {
     "duration": 3.028296,
     "end_time": "2025-06-14T01:49:18.268341",
     "exception": false,
     "start_time": "2025-06-14T01:49:15.240045",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7632075471698113"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "\n",
    "# Model Selection by doing train-validation split on the training data\n",
    "X = final_df\n",
    "Y = df[\"Transported\"]\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size=0.8)\n",
    "k_scores = []\n",
    "\n",
    "for k in range(1, 30):\n",
    "    knn_model = KNeighborsClassifier(n_neighbors=k)\n",
    "    knn_model.fit(X_train, Y_train)\n",
    "    Y_pred = knn_model.predict(X_test)\n",
    "    accuracy = accuracy_score(Y_test, Y_pred)\n",
    "    k_scores.append(accuracy)\n",
    "\n",
    "optimal_k = np.argmax(k_scores) + 1\n",
    "\n",
    "knn_model_best = KNeighborsClassifier(n_neighbors=optimal_k)\n",
    "knn_model_best.fit(X_train, Y_train)\n",
    "\n",
    "knn_model_best_accuracy = cross_val_score(knn_model_best, X_test, Y_test, scoring=\"accuracy\", cv=5).mean()\n",
    "knn_model_best_accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "cf6ef210",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:49:18.286255Z",
     "iopub.status.busy": "2025-06-14T01:49:18.285764Z",
     "iopub.status.idle": "2025-06-14T01:51:59.088936Z",
     "shell.execute_reply": "2025-06-14T01:51:59.087808Z"
    },
    "papermill": {
     "duration": 160.814268,
     "end_time": "2025-06-14T01:51:59.090577",
     "exception": false,
     "start_time": "2025-06-14T01:49:18.276309",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'kernel': 'rbf', 'gamma': 'scale', 'C': 3.41}\n",
      "Best CV score: 0.803\n",
      "0.8055717552887364\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "from scipy import stats\n",
    "\n",
    "parameter_distribution = [\n",
    "    {\n",
    "        \"kernel\": [\"rbf\"],\n",
    "        \"C\": [np.round(x, 2) for x in np.linspace(0.01, 100, 1000)], \n",
    "        \"gamma\": [\"scale\"] \n",
    "    }\n",
    "]\n",
    "\n",
    "random_search = RandomizedSearchCV(\n",
    "    SVC(),\n",
    "    parameter_distribution,\n",
    "    n_iter=50,\n",
    "    cv=5,\n",
    "    scoring=\"accuracy\",\n",
    "    n_jobs=-1\n",
    ")\n",
    "\n",
    "random_search.fit(X_train,Y_train)\n",
    "best_model = random_search.best_estimator_\n",
    "\n",
    "print(f\"Best parameters: {random_search.best_params_}\")\n",
    "print(f\"Best CV score: {random_search.best_score_:.3f}\")\n",
    "best_model_accuracy = cross_val_score(best_model, X_test, Y_test, scoring=\"accuracy\", cv=5).mean()\n",
    "print(best_model_accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "edb5ed8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:51:59.105190Z",
     "iopub.status.busy": "2025-06-14T01:51:59.104897Z",
     "iopub.status.idle": "2025-06-14T01:51:59.573818Z",
     "shell.execute_reply": "2025-06-14T01:51:59.572834Z"
    },
    "papermill": {
     "duration": 0.478506,
     "end_time": "2025-06-14T01:51:59.575741",
     "exception": false,
     "start_time": "2025-06-14T01:51:59.097235",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "predictions = best_model.predict(final_df_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b5134d03",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-14T01:51:59.590688Z",
     "iopub.status.busy": "2025-06-14T01:51:59.590324Z",
     "iopub.status.idle": "2025-06-14T01:51:59.608184Z",
     "shell.execute_reply": "2025-06-14T01:51:59.606588Z"
    },
    "papermill": {
     "duration": 0.02805,
     "end_time": "2025-06-14T01:51:59.610467",
     "exception": false,
     "start_time": "2025-06-14T01:51:59.582417",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "submission_df = pd.DataFrame({\n",
    "    \"PassengerId\": df_test[\"PassengerId\"],\n",
    "    \"Transported\": predictions\n",
    "})\n",
    "submission_df['Transported'] = submission_df['Transported'].astype(bool)\n",
    "submission_df.to_csv(\"submission.csv\", index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 3220602,
     "sourceId": 34377,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 177.961914,
   "end_time": "2025-06-14T01:52:02.242084",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-14T01:49:04.280170",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
